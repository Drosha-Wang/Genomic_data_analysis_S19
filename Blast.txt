BLAST Tutorial
¶
Tutorial Outline¶
1. Introduction
1. BLAST types
2. BLAST databases
3. BLAST example FOXP2
2. Alignment of two closely-related bacterial genomes
1. Run default BLASTN
2. Run default megaBLAST
3. Run MUMmer

1. Introduction
In this exercise we will learn about running BLAST (Basic Local Alignment Search Tool) searchs. Given one
or more query sequences (usually in FASTA format), BLAST looks for matching sequence regions between
them and a subject set.

A sufficiently close match between subsequences (denoted by arrows in the figure above, though matches
are usually longer than illustrated here) is called a high-scoring pair (HSP), while a query sequence is said
to hit a target sequence if they share one or more HSPs. Sometimes, however, the term “hit” is used
loosely, without differentiating between the two. Each HSP is associated with a “bitscore” that is based on
the similarity of the subsequences as determined by a particular set of rules. Because in larger subject
sets some good matches are likely to be found by chance, each HSP is also associated with an “E value,”

representing the expected number of matches one might find by chance in a subject set of that size with
that score or better. For example, an E value of 0.05 means that we can expect a match by chance in 1 in
20 similar searches, whereas an E value of 2.0 means we can expect 2 matches by chance for each similar
search.
BLAST is not a single tool, but rather a suite of tools (and the suite grows over the years as more features
and related tools are added). The most modern version of the software, called BLAST+, is maintained by
the National Center for Biotechnology Information (NCBI) and may be downloaded in binary and source
forms at ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/.
This exercise only briefly covers running BLAST on the command line in simple ways. Reading the help
information (e.g., with blastn --help) and the NCBI BLAST Command Line Applications User Manual at
http://www.ncbi.nlm.nih.gov/books/NBK1763/ is highly recommended. The NCBI manual covers quite a few
powerful and handy features of BLAST on the command line that this book does not.

A. BLAST type
The programs in the BLAST+ suite can search for and against sequences in protein format and in
nucleotide format (A’s, C’s, T’s, and G’s). Depending on what type the query and subject sets are, different
BLAST programs are used.

While two nucleotide sequences (N comparisons in the figure above) may be compared directly (as may
two protein sequences, represented by P), when we wish to compare a nucleotide sequence to a protein
sequence, we need to consider which reading frame of the nucleotide sequence corresponds to a protein.
The blastx and tblastn programs do this by converting nucleotide sequences into protein sequences in
all six reading frames (three on the forward DNA strand and three on the reverse) and comparing against
all of them. Generally such programs result in six times as much work to be done. The tblastx program
compares nucleotide queries against nucleotide subjects, but it does so in protein space with all six
conversions compared to all six on both sides.
Other more exotic BLAST tools include psiblast, which produces an initial search and tweaks the scoring
rules on the basis of the results; these tweaked scoring rules are used in a second search, generally finding
even more matches. This process is repeated as many times as the user wishes, with more dissimilar
matches being revealed in later iterations. The deltablast program considers a precomputed database of
scoring rules for different types of commonly found (conserved) sequences. Finally, rpsblast searches for
sequence matches against sets of profiles, each representing a collection of sequences (as in HMMER,
though not based on hidden Markov models).
All this talk of scoring rules indicates that the specific scoring rules are important, especially when

comparing two protein sequences. When comparing protein sequences from two similar species, for
example, we might wish to give a poor score to the relatively unlikely match of a nonpolar valine (V) to a
polar tyrosine (Y). But for dissimilar species separated by vast evolutionary time, such a mismatch might
not be as bad relative to other possibilities. Scoring matrices representing these rule sets with names like
BLOSUM and PAM have been developed using a variety of methods to capture these considerations. A
discussion of these details can be found in other publications (and are covered in BIOL397B - Sequence
Analysis).
Each of the various programs in the BLAST suite accepts a large number of options; try running blastn help to see them for the blastn program. Here is a summary of a few parameters that are most commonly
used for blastn et al.:
-query <fasta file>
The name (or path) of the FASTA-formatted file to search for as query sequences.
-subject <fasta file>
The name (or path) of the FASTA-formatted file to search in as subject sequences.
-evalue <real number>
Only HSPs with E values smaller than this should be reported. For example: -evalue 0.001
or -evalue 1e-6.
-outfmt <integer>
How to format the output. The default, 0, provides a human-readable (but not
programmatically parseable) text file. The values 6 and 7 produce tab-separated rows and
columns in a text file, with 7 providing explanatory comment lines. Similarly, a value of 10
produces comma-separated output; 11 produces a format that can later be quickly turned
into any other with another program called blast_formatter. Options 6, 7, and 10 can be
highly configured in terms of what columns are shown.
-max_target_seqs <integer>
When the output format is 6, 7, or 10 for each query sequence, only report HSPs for the best
<integer> different subject sequences. [Important note: this is incorrect. See the errata
section for details.]
-max_hsps <integer>
For each query/target pair, only report the best <integer> HSPs.
-out <output file>
Write the output to <output file> as opposed to the default of standard output.

B. BLAST databases
No doubt readers familiar with BLAST have been curious: aren’t there databases of some kind involved in

BLAST searches? Not necessarily. As we’ve seen, simple FASTA files will suffice for both the query and
subject set. It turns out, however, that from a computational perspective, simple FASTA files are not easily
searched. Thus BLAST+ provides a tool called makeblastdb that converts a subject FASTA file into an
indexed and quickly searchable (but not human-readable) version of the same information, stored in a set
of similarly named files (often at least three ending in .pin, .psq, and .phr for protein sequences, and
.nin, .nsq, and .nhr for nucleotide sequences). This set of files represents the “database,” and the
database name is the shared file name prefix of these files.

Running makeblastdb on a FASTA file is fairly simple: makeblastdb -in <fasta file> -out <database
name> -dbtype <type> -title <title> -parse_seqids, where <type> is one of prot or nucl, and
<database name> and <title> are by default the <fasta file> when only one fasta file is provided but
can be different with <database name> needing to be an acceptable file name and <title> being free to
have whitespace if enclosed in quotes. The -parse_seqids flag indicates that the sequence IDs from the
FASTA file should be included in the database so that they can be used in outputs as well as by other tools
like blastdbcmd (discussed below).
Once a BLAST database has been created, other options can be used with blastn et al.:
-db <database name>
The name of the database to search against (as opposed to using -subject).
-num_threads <integer>
Use <integer> CPU cores on a multicore system, if they are available.
Because of the class size, please limit to 4 or less CPU.
When using the -db option, the BLAST tools will search for the database files in three locations: (1) the
present working directory, (2) your home directory, and (3) the paths specified in the $BLASTDB
environment variable.
The tool blastdbcmd can be used to get information about BLAST databases—for example, with
blastdbcmd -db <database name> -info — and can show the databases in a given path with
blastdbcmd -list <path> (so, blastdbcmd -list $BLASTDB will show the databases found in the default
search paths). This tool can also be used to extract sequences or information about them from databases
based on information like the IDs reported in output files. As always, reading the help and documentation
for software like BLAST is highly recommended.

C. BLAST example FOXP2
In this example, we are going to (1) make a blast database of the protein coding sequences in mouse and
(2) search that database using the human FOXP2 protein sequence. FOXP2 is a transcription factor that is
part of the Forkhead box gene family and is required for proper development of speech and language.
Since mouse and human share a common ancestor, it is highly probably that an ortholog of FOXP2 exists
in the mouse genome.

>NP_683696.2 | forkhead box protein P2 isoform II FOXP2
mmqesatetisnssmnqngmstlssqldagsrdgrssgdtssevstvellhlqqqqalqa
arqlllqqqtsglkspkssdkqrplqellpetklcicghssgdghphntfavpvsvammt
...
In [ ]:

%%bash
makeblastdb -in mouse/gencode.vM21.pc_translations.fa -dbtype prot
blastp -query NP_683696.2.fasta -db mouse/gencode.vM21.pc_translations.fa

2. Alignment of two closely-related
bacterial genomes
Finally, we'll compare some closely-related complete bacterial genomes. These are small, so all alignments
should be fast. Being closely-related, we should see little divergence between genomes. Also, being
completely sequenced bacterial genomes, there should not be any awkward issues with fragmentation,
rearrangements or scaffolding.
To begin with, we'll compare the E. coli O157\:H7 Sakai chromosome with that of E. coli CFT 073, using
blastn megaBLAST and MUMmer. These two bacteria are different isolates of the same bacterial species.
Although they have distinguishable phenotypes, it is reasonable to expect them to be closely related at the
sequence level.
Genome sequences are located at:

E. coli O157\:H7 Saka
/home/WWU/BIOL497R/data/CompGen/NC_002695/NC_002695_genomic.fna
E. coli CFT 073
/home/WWU/BIOL497R/data/CompGen/NC_004431/NC_004431_genomic.fna

A. Run default BLASTN
As a starting point for comparison, run a default (legacy-style) BLASTN search on the two E. coli genomes:
In [ ]:

%%bash
DATA=/home/WWU/BIOL497R/data/CompGen/
time blastn -query $DATA/NC_002695/NC_002695_genomic.fna -subject
$DATA/NC_004431/NC_004431_genomic.fna -outfmt 6 -out wga_out/E_coli_blastn.tab -task
blastn
NOTE: The time command reports how long it takes to run the command-line instructions. It is useful for
getting a rough measurement of the time taken to run your commands, so you can estimate efficiency. In
this case, the reported real time - also known as wall clock time - indicates the time taken for all
operations, including CPU waiting, and it does not accurately represent CPU usage time. If you need to
profile algorithms directly for efficiency, it is usually better to use a dedicated profiling tool or module.
Blast output format 6
Column

alias

Description

1.

qseqid

query (e.g., gene) sequence id

2.

sseqid

subject (e.g., reference genome) sequence id

3.

pident

percentage of identical matches

4.

length

alignment length

5.

mismatch number of mismatches

6.

gapopen

number of gap openings

7.

qstart

start of alignment in query

8.

qend

end of alignment in query

9.

sstart

start of alignment in subject

10.

send

end of alignment in subject

11.

evalue

expect value

12.

bitscore

bit score

You can inspect the resulting output file with the head, tail and wc -l commands (see below).
In [ ]:

%%bash
head wga_out/E_coli_blastn.tab
tail wga_out/E_coli_blastn.tab
wc -l wga_out/E_coli_blastn.tab

B. Run default megaBLAST
At the command line, this requires only a small modification of the usual BLASTN syntax to run:
In [ ]:

%%bash
DATA=/home/WWU/BIOL497R/data/CompGen/
time blastn -query $DATA/NC_002695/NC_002695_genomic.fna -subject
$DATA/NC_004431/NC_004431_genomic.fna \
-outfmt 6 -out wga_out/E_coli_megablast.tab -task megablast
Again, we can the head, tail and wc -l commands can be used to get a quick overview of the data.
In [ ]:

%%bash
head wga_out/E_coli_megablast.tab
tail wga_out/E_coli_megablast.tab
wc -l wga_out/E_coli_megablast.tab
ACTIVITY 1: Were there differences in the time taken, or the final output alignments, between the two
BLAST algorithms? On the basis of these results, which BLAST method would you be likely choose for
closely-related bacterial genome alignments, and why?

C. Run MUMmer
MUMmer works quite differently to any BLAST alignment, at the command-line, so you may find it useful to
inspect the documentation link from time to time.
NOTE: MUMmer is both the name of an alignment program (mummer), as well as the suite of alignment
programs.
We'll start with mummer, which is useful to get a global view of a whole genome alignment, but is not as
well-suited as nucmer (see below) for more detailed analysis
Run the command:
In [ ]:

%%bash
DATA=/home/WWU/BIOL497R/data/CompGen/
time mummer -mum -b -c $DATA/NC_002695/NC_002695_genomic.fna

$DATA/NC_004431/NC_004431_genomic.fna > wga_out/E_coli_mummer.mums
Here, the options mean:
-b: compare both forward and reverse strand sequences
-c: report reverse complement sequence match locations relative to the forward strand
NOTE: the first named sequence is the reference sequence. This is important to know, especially if you are
making a choice of query and reference on the basis of sequence size, for speed (which is recommended
under some circumstances - see MUMmer documentation for details).
A quick idea of the output format of MUMmer, and the number of alignments, can be gained with the head
command, as before, but it should be clear that the MUMmer output format differs quite greatly from
BLAST output, and would need to be handled differently in any script you write.
In [ ]:

%%bash
head wga_out/E_coli_mummer.mums
The program mummer is useful for getting an overview of a global alignment, and the mummerplot command
is provided so that you can visualize its output. mummerplot provides script output suitable for the plotting
package GNUplot. gnuplot allows you to plot figures directly from a command-line, or a script, and also has
an interactive environment for plotting. mummerplot will run gnuplot automatically to create a figure for
you, so long as that package is installed.
To visualize the mummer output then, run:
In [ ]:

%%bash
mummerplot --png --prefix=wga_out/E_coli_mummer wga_out/E_coli_mummer.mums
This will render a PNG format figure of your alignment, like that displayed below.

In the figure above, you should see mummer's output displayed with the reference genome along the Xaxis, and the query genome on the Y-axis.
Purple points/lines indicate an alignment in forward orientation, and blue points/lines an alignment in
reverse orientation (with respect to the reference sequence).
The dominant feature of the alignment is the discontinuous purple line from bottom-left to top-right. This
indicates a substantial full-length alignment between the two genomes. Breaks in the diagonal that look
like 'jumps' in the X- or Y-axis represent insertions/deletions in either the query or reference sequence
Diagonal runs of alignments that are off the main diagonal indicate repeated similar sequence, or
sequence rearrangements. It is usual with mummer output to see many individual alignments as 'noise' off
the main diagonal.

It is possible to run mummer with more than one query file. For example, we could introduce a third E. coli
chromosome into the alignment as follows:
In [ ]:

%%bash
DATA=/home/WWU/BIOL497R/data/CompGen/
time mummer -mum -b -c $DATA/NC_002695/NC_002695_genomic.fna
$DATA/NC_004431/NC_004431_genomic.fna $DATA/NC_010468_genomic.fna >
wga_out/E_coli_mummer_threeway.mums
mummerplot --png --prefix=wga_out/E_coli_mummer_threeway
wga_out/E_coli_mummer_threeway.mums
and the graphical output changes (see below):

If you viewed the threeway alignment image above, you would have seen that more purple entries were
introduced, notably two purple diagonal lines, corresponding to most of the reference genome sequence.
This results from the overlay of two independent alignments, on the same plot. This is not easy to
interpret, as there is no way to determine visually which points and lines derive from which alignment.
ACTIVITY 2: Using mummer, align the $DATA/NC_010468_genomic.fna sequence against the same
reference as above ($DATA/NC_002695/NC_002695_genomic.fna), and generate a plot of the alignment
using mummerplot. Interpret the image. Both sequences represent completely sequenced chromosomes of
record, stored in the public repository at NCBI. What does this alignment suggest about the agreement
between genome sequences of the same species in public repositories?
ACTIVITY 3: Using mummer, align the de novo assembly from the previous exercise against the same
reference as above (NC_002695), and generate a plot of the alignment using mummerplot. Interpret the
image. What does this alignment suggest about the agreement between a de novo assembly and complete
reference genome?
In [ ]:

In [ ]:

